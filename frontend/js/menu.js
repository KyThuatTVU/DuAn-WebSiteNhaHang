// Menu JavaScript - Ch·ª©c nƒÉng cho trang th·ª±c ƒë∆°n

// Menu data
const menuData = [
    // Khai V·ªã
    {
        id: 1,
        name: "G·ªèi Ng√≥ Sen T√¥m Th·ªãt",
        category: "appetizers",
        price: 85000,
        image: "img/goingosen.jpg",
        description: "Ng√≥ sen gi√≤n ng·ªçt h√≤a quy·ªán c√πng t√¥m t∆∞∆°i, th·ªãt ba ch·ªâ th√°i m·ªèng v√† n∆∞·ªõc s·ªët ƒë·∫∑c bi·ªát.",
        tags: ["g·ªèi", "ng√≥ sen", "t√¥m", "th·ªãt", "khai v·ªã"]
    },
    {
        id: 2,
        name: "Ch·∫£ Gi√≤ Ph∆∞∆°ng Nam",
        category: "appetizers", 
        price: 75000,
        image: "img/chagioPN.jpg",
        description: "Ch·∫£ gi√≤ gi√≤n r·ª•m v·ªõi nh√¢n t√¥m th·ªãt, mi·∫øn v√† n·∫•m, ƒÉn k√®m v·ªõi rau s·ªëng v√† n∆∞·ªõc m·∫Øm chua ng·ªçt.",
        tags: ["ch·∫£ gi√≤", "t√¥m", "th·ªãt", "mi·∫øn", "n·∫•m", "khai v·ªã"]
    },
    // M√≥n Ch√≠nh
    {
        id: 3,
        name: "C√° L√≥c N∆∞·ªõng Trui",
        category: "maindishes",
        price: 185000,
        image: "img/calocnuongtrui.jpg",
        description: "C√° l√≥c t∆∞∆°i n∆∞·ªõng trui tr√™n than hoa, ph·∫øt m·ª° h√†nh v√† ƒÉn k√®m v·ªõi c√°c lo·∫°i rau th∆°m ƒë·∫∑c tr∆∞ng mi·ªÅn Nam.",
        tags: ["c√° l√≥c", "n∆∞·ªõng", "trui", "than hoa", "rau th∆°m", "m√≥n ch√≠nh"]
    },
    {
        id: 4,
        name: "S∆∞·ªùn N∆∞·ªõng Chao",
        category: "maindishes",
        price: 165000,
        image: "img/suonnuongchao.webp",
        description: "S∆∞·ªùn heo ∆∞·ªõp chao ƒë·ªè, n∆∞·ªõng than hoa th∆°m l·ª´ng, ƒÉn k√®m v·ªõi kim chi c·∫£i chua v√† ƒë·ªì chua.",
        tags: ["s∆∞·ªùn", "n∆∞·ªõng", "chao", "heo", "kim chi", "m√≥n ch√≠nh"]
    },
    // Canh & L·∫©u
    {
        id: 5,
        name: "L·∫©u M·∫Øm",
        category: "hotpot",
        price: 250000,
        image: "img/laumam.webp",
        description: "N∆∞·ªõc l·∫©u ƒë∆∞·ª£c n·∫•u t·ª´ m·∫Øm c√° linh, th√™m c√°c lo·∫°i rau ƒë·ªìng v√† h·∫£i s·∫£n t∆∞∆°i ngon, t·∫°o n√™n h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√† kh√≥ qu√™n.",
        tags: ["l·∫©u", "m·∫Øm", "c√° linh", "rau ƒë·ªìng", "h·∫£i s·∫£n", "canh l·∫©u"]
    },
    {
        id: 6,
        name: "L·∫©u C√° K√®o",
        category: "hotpot",
        price: 225000,
        image: "img/laucakeo.jpg",
        description: "L·∫©u c√° k√®o chua cay v·ªõi n∆∞·ªõc d√πng ƒë·∫∑c bi·ªát n·∫•u t·ª´ x∆∞∆°ng heo v√† me chua, ƒÉn k√®m v·ªõi rau mu·ªëng, b√¥ng ƒëi√™n ƒëi·ªÉn.",
        tags: ["l·∫©u", "c√° k√®o", "chua cay", "me chua", "rau mu·ªëng", "canh l·∫©u"]
    },
    // C∆°m & B√∫n
    {
        id: 7,
        name: "B√°nh X√®o Mi·ªÅn T√¢y",
        category: "rice",
        price: 95000,
        image: "img/banhxeo.jpg",
        description: "B√°nh x√®o gi√≤n tan v·ªõi nh√¢n t√¥m, th·ªãt, gi√° v√† ƒë·∫≠u xanh, ƒÉn k√®m v·ªõi rau s·ªëng v√† n∆∞·ªõc m·∫Øm chua ng·ªçt.",
        tags: ["b√°nh x√®o", "mi·ªÅn t√¢y", "t√¥m", "th·ªãt", "gi√°", "ƒë·∫≠u xanh", "c∆°m b√∫n"]
    },
    {
        id: 8,
        name: "C∆°m Ch√°y S∆∞·ªùn Rim",
        category: "rice",
        price: 125000,
        image: "img/comchaysuonrim.webp",
        description: "C∆°m ƒë∆∞·ª£c chi√™n gi√≤n, ƒÉn k√®m v·ªõi s∆∞·ªùn rim m·∫∑n ng·ªçt ƒë·∫≠m ƒë√†, r∆∞·ªõi th√™m m·ª° h√†nh th∆°m ph·ª©c.",
        tags: ["c∆°m ch√°y", "s∆∞·ªùn rim", "m·∫∑n ng·ªçt", "m·ª° h√†nh", "c∆°m b√∫n"]
    },
    // Tr√°ng Mi·ªáng
    {
        id: 9,
        name: "Ch√® B·∫Øp",
        category: "desserts",
        price: 45000,
        image: "img/chebap.webp",
        description: "Ch√® b·∫Øp b√©o ng·∫≠y v·ªõi v·ªã ng·ªçt t·ª± nhi√™n t·ª´ b·∫Øp, n∆∞·ªõc c·ªët d·ª´a v√† ƒë·∫≠u xanh.",
        tags: ["ch√®", "b·∫Øp", "b√©o ng·∫≠y", "n∆∞·ªõc c·ªët d·ª´a", "ƒë·∫≠u xanh", "tr√°ng mi·ªáng"]
    },
    // ƒê·ªì U·ªëng
    {
        id: 10,
        name: "N∆∞·ªõc S√¢m L·∫°nh",
        category: "drinks",
        price: 35000,
        image: "img/nuocsamlanh.jpg",
        description: "N∆∞·ªõc s√¢m m√°t l·∫°nh gi·∫£i nhi·ªát, n·∫•u t·ª´ c√°c lo·∫°i th·∫£o m·ªôc t·ª± nhi√™n t·ªët cho s·ª©c kh·ªèe.",
        tags: ["n∆∞·ªõc s√¢m", "m√°t l·∫°nh", "gi·∫£i nhi·ªát", "th·∫£o m·ªôc", "ƒë·ªì u·ªëng"]
    },
    {
        id: 11,
        name: "Tr√† T·∫Øc",
        category: "drinks",
        price: 30000,
        image: "img/tratac.jpg",
        description: "Tr√† t·∫Øc chua ng·ªçt thanh m√°t, gi·∫£i kh√°t hi·ªáu qu·∫£.",
        tags: ["tr√† t·∫Øc", "chua ng·ªçt", "thanh m√°t", "gi·∫£i kh√°t", "ƒë·ªì u·ªëng"]
    }
];

// Menu Manager Class
class MenuManager {
    constructor() {
        this.apiService = new MenuAPIService();
        this.menuData = [];
        this.filteredData = [];
        this.currentCategory = 'all';
        this.currentSearchTerm = '';
        this.cart = JSON.parse(localStorage.getItem('cart')) || [];
        this.isLoading = false;
        this.searchTimeout = null;
        this.init();
    }

    async init() {
        console.log('üöÄ Initializing MenuManager...');

        // Always setup event listeners first
        this.setupEventListeners();

        // Try to load data (with fallback)
        await this.loadInitialData();

        // Update cart UI
        this.updateCartCounter();

        console.log('‚úÖ MenuManager initialized');
    }

    async testAPIConnection() {
        console.log('üîó Testing API connection...');
        const isConnected = await this.apiService.testConnection();
        if (!isConnected) {
            console.warn('‚ö†Ô∏è API not available, will use fallback data');
            this.showWarning('ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu offline. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø.');
            return false;
        }
        console.log('‚úÖ API connection successful');
        return true;
    }

    async loadInitialData() {
        try {
            this.showLoading();
            console.log('üìä Loading initial menu data...');

            const response = await this.apiService.searchFoods({ limit: 50 });

            if (response && response.success && response.data) {
                this.menuData = response.data.map(item => this.apiService.formatFoodItem(item));
                this.filteredData = [...this.menuData];
                this.renderMenuItems();

                console.log(`‚úÖ Loaded ${this.menuData.length} menu items`);

                // Show offline message if using fallback data
                if (response.message && response.message.includes('offline')) {
                    this.showWarning(response.message);
                }
            } else {
                throw new Error('Invalid response format or no data received');
            }
        } catch (error) {
            console.error('‚ùå Error loading menu data:', error);
            this.showError(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu menu: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    setupEventListeners() {
        // Category filter buttons
        const filterButtons = document.querySelectorAll('.menu-category-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                this.filterByCategory(btn.dataset.category);
                this.updateActiveButton(btn);
            });
        });

        // Search functionality with API integration
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');

        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearchInput(e.target.value);
            });

            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.performSearch(e.target.value);
                }
            });
        }

        if (searchButton) {
            searchButton.addEventListener('click', () => {
                this.performSearch(searchInput.value);
            });
        }

        // Set initial active button
        const allButton = document.querySelector('[data-category="all"]');
        if (allButton) {
            this.updateActiveButton(allButton);
        }
    }

    filterByCategory(category) {
        this.currentCategory = category;
        this.applyFilters();
    }

    // Handle search input with debouncing
    handleSearchInput(searchTerm) {
        // Clear previous timeout
        if (this.searchTimeout) {
            clearTimeout(this.searchTimeout);
        }

        // Set new timeout for debounced search
        this.searchTimeout = setTimeout(() => {
            this.performSearch(searchTerm);
        }, 300); // 300ms delay
    }

    // Perform actual search
    async performSearch(searchTerm) {
        try {
            this.currentSearchTerm = searchTerm.trim();

            if (this.currentSearchTerm.length === 0) {
                // If empty search, load all items
                await this.loadInitialData();
                return;
            }

            if (this.currentSearchTerm.length < 2) {
                // Don't search for terms less than 2 characters
                return;
            }

            this.showLoading();

            const searchParams = {
                search: this.currentSearchTerm,
                category: this.currentCategory !== 'all' ? this.currentCategory : undefined,
                limit: 50
            };

            const response = await this.apiService.searchFoods(searchParams);

            if (response.success && response.data) {
                this.filteredData = response.data.map(item => this.apiService.formatFoodItem(item));
                this.renderMenuItems();

                // Update search results info
                this.updateSearchResultsInfo(this.filteredData.length, this.currentSearchTerm);

                console.log(`üîç Search "${this.currentSearchTerm}" found ${this.filteredData.length} results`);
            } else {
                throw new Error('Invalid search response');
            }

        } catch (error) {
            console.error('‚ùå Search error:', error);
            this.showError(`L·ªói t√¨m ki·∫øm: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    // Legacy search method for backward compatibility
    searchItems(searchTerm) {
        this.performSearch(searchTerm);
    }

    applyFilters() {
        this.showLoading();
        
        setTimeout(() => {
            let filtered = [...this.menuData];

            // Apply category filter
            if (this.currentCategory !== 'all') {
                filtered = filtered.filter(item => item.category === this.currentCategory);
            }

            // Apply search filter
            if (this.currentSearchTerm) {
                filtered = filtered.filter(item => 
                    item.name.toLowerCase().includes(this.currentSearchTerm) ||
                    item.description.toLowerCase().includes(this.currentSearchTerm) ||
                    item.tags.some(tag => tag.toLowerCase().includes(this.currentSearchTerm))
                );
            }

            this.filteredData = filtered;
            this.renderMenuItems();
            this.updateSearchInfo();
            this.hideLoading();
        }, 300);
    }

    renderMenuItems() {
        const container = document.getElementById('menuItemsContainer');
        const emptyState = document.getElementById('emptyState');
        
        if (!container) return;
        
        if (this.filteredData.length === 0) {
            container.innerHTML = '';
            if (emptyState) emptyState.classList.remove('hidden');
            return;
        }

        if (emptyState) emptyState.classList.add('hidden');
        
        container.innerHTML = this.filteredData.map(item => `
            <div class="menu-item bg-white rounded-lg overflow-hidden shadow-md stagger-item hover-lift" data-category="${item.category}">
                <div class="h-64 overflow-hidden relative">
                    <img src="${item.image}"
                         alt="${item.name}"
                         class="w-full h-full object-cover hover-scale"
                         onerror="this.src='${this.apiService.getPlaceholderImage()}'; this.onerror=null;"
                         loading="lazy">
                    <div class="absolute top-2 right-2">
                        <span class="px-2 py-1 text-xs rounded-full ${item.isAvailable ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${item.isAvailable ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'}
                        </span>
                    </div>
                </div>
                <div class="p-6">
                    <div class="flex justify-between items-start mb-3">
                        <h3 class="font-bold text-xl">${item.name}</h3>
                        <span class="price-tag">${item.priceFormatted || this.formatPrice(item.price)}</span>
                    </div>
                    <p class="text-gray-600 mb-4 leading-relaxed">${item.description || 'M√≥n ƒÉn ngon ƒë·∫∑c tr∆∞ng mi·ªÅn Nam'}</p>
                    <div class="flex items-center justify-between mb-4">
                        <span class="text-sm text-gray-500">
                            <i class="fas fa-tag mr-1"></i>${item.categoryName || 'M√≥n ƒÉn'}
                        </span>
                        ${item.stockDisplay ? `<span class="text-sm text-blue-600">${item.stockDisplay}</span>` : ''}
                    </div>
                    <button class="add-to-cart-btn ${item.isAvailable ? 'bg-primary hover:bg-red-700' : 'bg-gray-400 cursor-not-allowed'} text-white py-3 px-6 rounded-lg transition duration-300 w-full font-semibold"
                            data-id="${item.id}"
                            ${!item.isAvailable ? 'disabled' : ''}>
                        <i class="fas fa-cart-plus mr-2"></i>${item.isAvailable ? 'Th√™m v√†o gi·ªè' : 'H·∫øt h√†ng'}
                    </button>
                </div>
            </div>
        `).join('');

        // Setup add to cart buttons
        this.setupAddToCartButtons();
        
        // Trigger animations
        this.triggerAnimations();
    }

    setupAddToCartButtons() {
        const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
        addToCartButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const itemId = parseInt(btn.dataset.id);
                this.addToCart(itemId, btn);
            });
        });
    }

    addToCart(itemId, buttonElement) {
        const item = this.menuData.find(item => item.id === itemId);
        if (!item) return;

        // Add to cart array
        const existingItem = this.cart.find(cartItem => cartItem.id === itemId);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.cart.push({ ...item, quantity: 1 });
        }

        // Save to localStorage
        localStorage.setItem('cart', JSON.stringify(this.cart));
        
        // Update cart counter
        this.updateCartCounter();
        
        // Visual feedback
        const originalHTML = buttonElement.innerHTML;
        buttonElement.innerHTML = '<i class="fas fa-check mr-2"></i>ƒê√£ th√™m!';
        buttonElement.classList.remove('bg-primary', 'hover:bg-red-700');
        buttonElement.classList.add('bg-green-500');
        buttonElement.disabled = true;
        
        setTimeout(() => {
            buttonElement.innerHTML = originalHTML;
            buttonElement.classList.remove('bg-green-500');
            buttonElement.classList.add('bg-primary', 'hover:bg-red-700');
            buttonElement.disabled = false;
        }, 2000);
        
        // Show notification
        this.showNotification(`ƒê√£ th√™m ${item.name} v√†o gi·ªè h√†ng!`, 'success');
    }

    updateCartCounter() {
        const cartCounter = document.querySelector('#cartBtn span');
        if (cartCounter) {
            const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCounter.textContent = totalItems;
        }
    }

    updateActiveButton(activeBtn) {
        const buttons = document.querySelectorAll('.menu-category-btn');
        buttons.forEach(btn => {
            btn.classList.remove('active');
        });
        activeBtn.classList.add('active');
    }

    updateSearchInfo() {
        const searchInfo = document.getElementById('searchResultsInfo');
        const searchText = document.getElementById('searchResultsText');
        
        if (!searchInfo || !searchText) return;
        
        if (this.currentSearchTerm || this.currentCategory !== 'all') {
            let text = `T√¨m th·∫•y ${this.filteredData.length} m√≥n ƒÉn`;
            
            if (this.currentSearchTerm) {
                text += ` cho "${this.currentSearchTerm}"`;
            }
            
            if (this.currentCategory !== 'all') {
                const categoryNames = {
                    'appetizers': 'Khai V·ªã',
                    'maindishes': 'M√≥n Ch√≠nh', 
                    'rice': 'C∆°m & B√∫n',
                    'hotpot': 'Canh & L·∫©u',
                    'desserts': 'Tr√°ng Mi·ªáng',
                    'drinks': 'ƒê·ªì U·ªëng'
                };
                text += ` trong danh m·ª•c "${categoryNames[this.currentCategory]}"`;
            }
            
            searchText.textContent = text;
            searchInfo.classList.remove('hidden');
        } else {
            searchInfo.classList.add('hidden');
        }
    }

    showLoading() {
        const loadingState = document.getElementById('loadingState');
        const container = document.getElementById('menuItemsContainer');
        
        if (loadingState) loadingState.classList.remove('hidden');
        if (container) container.style.opacity = '0.5';
    }

    hideLoading() {
        const loadingState = document.getElementById('loadingState');
        const container = document.getElementById('menuItemsContainer');

        if (loadingState) loadingState.classList.add('hidden');
        if (container) container.style.opacity = '1';
    }

    showError(message) {
        const container = document.getElementById('menuItemsContainer');
        if (container) {
            container.innerHTML = `
                <div class="col-span-full flex justify-center items-center py-12">
                    <div class="text-center">
                        <div class="text-red-500 text-6xl mb-4">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-2">C√≥ l·ªói x·∫£y ra</h3>
                        <p class="text-gray-600 mb-4">${message}</p>
                        <div class="space-x-4">
                            <button onclick="menuManager.loadInitialData()" class="bg-primary hover:bg-red-700 text-white px-4 py-2 rounded-lg transition duration-300">
                                <i class="fas fa-redo mr-2"></i>Th·ª≠ l·∫°i
                            </button>
                            <button onclick="menuManager.useOfflineMode()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition duration-300">
                                <i class="fas fa-wifi-slash mr-2"></i>Ch·∫ø ƒë·ªô offline
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    showWarning(message) {
        // Show warning banner at top
        const warningBanner = document.createElement('div');
        warningBanner.id = 'warningBanner';
        warningBanner.className = 'bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4';
        warningBanner.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>
                    <span class="text-yellow-800">${message}</span>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" class="text-yellow-600 hover:text-yellow-800">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        // Insert before menu container
        const menuContainer = document.getElementById('menuItemsContainer');
        if (menuContainer && menuContainer.parentNode) {
            // Remove existing warning if any
            const existingWarning = document.getElementById('warningBanner');
            if (existingWarning) {
                existingWarning.remove();
            }

            menuContainer.parentNode.insertBefore(warningBanner, menuContainer);
        }
    }

    async useOfflineMode() {
        try {
            this.showLoading();
            const response = await this.apiService.getFallbackData({ limit: 50 });

            if (response && response.data) {
                this.menuData = response.data.map(item => this.apiService.formatFoodItem(item));
                this.filteredData = [...this.menuData];
                this.renderMenuItems();
                this.showWarning('ƒêang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô offline v·ªõi d·ªØ li·ªáu m·∫´u');
                console.log(`üì¶ Loaded ${this.menuData.length} offline menu items`);
            }
        } catch (error) {
            console.error('‚ùå Error loading offline data:', error);
            this.showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu offline');
        } finally {
            this.hideLoading();
        }
    }

    updateSearchResultsInfo(count, searchTerm) {
        const searchInfo = document.getElementById('searchResultsInfo');
        const searchText = document.getElementById('searchResultsText');

        if (!searchInfo || !searchText) return;

        if (searchTerm && searchTerm.trim()) {
            searchText.innerHTML = `
                <span class="text-blue-800">
                    <i class="fas fa-search mr-2"></i>
                    T√¨m th·∫•y <strong>${count}</strong> k·∫øt qu·∫£ cho "<strong>${searchTerm}</strong>"
                </span>
                <button onclick="menuManager.clearSearch()" class="text-blue-600 hover:text-blue-800 text-sm ml-4">
                    <i class="fas fa-times mr-1"></i>X√≥a t√¨m ki·∫øm
                </button>
            `;
            searchInfo.classList.remove('hidden');
        } else {
            searchInfo.classList.add('hidden');
        }
    }

    async clearSearch() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = '';
        }

        this.currentSearchTerm = '';
        this.currentCategory = 'all';
        await this.loadInitialData();
        this.updateSearchResultsInfo(0, '');

        // Reset category buttons
        const categoryButtons = document.querySelectorAll('.category-btn');
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        const allBtn = document.querySelector('.category-btn[data-category="all"]');
        if (allBtn) allBtn.classList.add('active');
    }

    formatPrice(price) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(price);
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-20 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 ${
            type === 'success' ? 'bg-green-500 text-white' : 
            type === 'error' ? 'bg-red-500 text-white' : 
            'bg-blue-500 text-white'
        }`;
        notification.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${message}`;
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Animate out and remove
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    triggerAnimations() {
        if (window.gsap && window.ScrollTrigger) {
            // Menu items animation
            gsap.utils.toArray(".menu-item").forEach((item, i) => {
                gsap.from(item, {
                    opacity: 0,
                    y: 60,
                    duration: 0.8,
                    delay: i * 0.1,
                    ease: "power2.out",
                    scrollTrigger: {
                        trigger: item,
                        start: "top 85%",
                        toggleActions: "play none none reset"
                    }
                });
            });
        }
    }

    // Public methods for external access
    getCart() {
        return this.cart;
    }

    clearCart() {
        this.cart = [];
        localStorage.removeItem('cart');
        this.updateCartCounter();
    }

    removeFromCart(itemId) {
        this.cart = this.cart.filter(item => item.id !== itemId);
        localStorage.setItem('cart', JSON.stringify(this.cart));
        this.updateCartCounter();
    }
}

// Export for global use
window.MenuManager = MenuManager;
window.menuData = menuData;
